# ========================================================================================== #
#                                                                                            #
#                             <<< Neural Network Results Plotter >>>                         #
#                                                                                            #
# ========================================================================================== #
#                                                                                            #
#  This script loads the results from a 'results.npz' file (generated by the batch          #
#  training script) and creates a scatter plot of final losses against the number of         #
#  activation regions. The plot is then saved as a PNG image.                                #
#                                                                                            #
# ========================================================================================== #


import numpy as np
import matplotlib.pyplot as plt
import os
import glob # For finding the latest results folder

def plot_experiment_results(results_folder=None):
    """
    Loads results from a specified folder (or the latest if none provided)
    and generates a scatter plot.
    """
    if results_folder is None:
        # Find the latest results folder if not specified
        list_of_folders = glob.glob('results/*')
        if not list_of_folders:
            print("Error: No 'results' folders found. Please run the training script first.")
            return
        results_folder = max(list_of_folders, key=os.path.getctime)
        print(f"Loading results from the latest folder: '{results_folder}'")
    else:
        if not os.path.isdir(results_folder):
            print(f"Error: Specified results folder '{results_folder}' does not exist.")
            return
        print(f"Loading results from specified folder: '{results_folder}'")

    results_file = os.path.join(results_folder, 'results.npz')

    if not os.path.exists(results_file):
        print(f"Error: 'results.npz' not found in '{results_folder}'.")
        return

    # Load the data
    data = np.load(results_file)
    final_losses = data['final_losses']
    activation_regions = data['activation_regions']
    seen_regions = data['seen_activation_regions']

    if len(final_losses) == 0:
        print("No data found to plot. 'final_losses' array is empty.")
        return

    print(f"Loaded {len(final_losses)} data points.")
    print(f"Final Losses (min/max/avg): {np.min(final_losses):.4f} / {np.max(final_losses):.4f} / {np.mean(final_losses):.4f}")
    print(f"Activation Regions (min/max/avg): {np.min(activation_regions)} / {np.max(activation_regions)} / {np.mean(activation_regions):.2f}")
    print(f"Seen Regions (min/max/avg): {np.min(seen_regions)} / {np.max(seen_regions)} / {np.mean(seen_regions):.2f}")

    # Create the two scatter plots, one for the activation regions and one for the seen regions

    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 7))
    fig.suptitle('Final Validation Loss vs. Number of Regions', fontsize=20)
    plt.subplots_adjust(wspace=0.3)
    # Plot for Activation Regions
    ax1.scatter(final_losses, activation_regions, alpha=0.7, edgecolors='w', s=100, color='tab:blue')
    ax1.set_title('Activation Regions', fontsize=16)
    ax1.set_xlabel('Final Validation Loss (MSE)', fontsize=12)
    ax1.set_ylabel('Number of Activation Regions', fontsize=12)
    ax1.grid(True, linestyle='--', alpha=0.6)
    ax1.legend()

    # Plot for Seen Regions
    ax2.scatter(final_losses, seen_regions, alpha=0.7, edgecolors='w', s=100, color='tab:orange')
    ax2.set_title('Seen Regions', fontsize=16)
    ax2.set_xlabel('Final Validation Loss (MSE)', fontsize=12)
    ax2.set_ylabel('Number of Seen Regions', fontsize=12)
    ax2.grid(True, linestyle='--', alpha=0.6)
    ax2.legend()
    # Save the combined plot
    combined_plot_filename = os.path.join(results_folder, 'loss_vs_regions_combined.png')
    plt.savefig(combined_plot_filename)
    plt.close() # Close the plot to free memory
    print(f"âœ“ Combined scatter plot saved to '{combined_plot_filename}'.")

if __name__ == '__main__':
    # You can specify a results folder directly, e.g., plot_experiment_results('results/2023-10-27_10-30-00')
    # If no argument is given, it will automatically find the latest created results folder.
    plot_experiment_results()